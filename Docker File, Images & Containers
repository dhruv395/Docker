Image vs. Container
• An Image is the application we want to run
• A Container is an instance of that image running as a process
• You can have many containers running off the same image
• In this lecture our image will be the Nginx web server
• Docker's default image "registry" is called Docker Hub
(hub.docker.com)



docker build --tag=friendlyhello .          ### build a docker image from docker file in machine’s local Docker image registry:
docker images                               ## check docker images

#### build a docker container from docker image mapping your machine’s port 4000 to the container’s published port 80
docker run -p 4000:80 friendlyhello  
or  
docker run -d -p 4000:80 friendlyhello      ## run in background/detached mode
docker ps                                    ## check running containers
docker ps -a                                 ## check all containers
docker container stop 5941b7f4039b           ## to stop the running container

########## Share your image with DockerHub repository
how to push to registries when you want to deploy containers to production.
A registry is a collection of repositories, and a repository is a collection of images—sort of like a GitHub repository.

steps:
Log in with your Docker ID

docker login
docker tag image username/repository:tag        ##Tag the image
e,g; docker tag friendlyhello dhruv395/get-started:version0.0.1
docker image ls                             ## Run docker image ls to see your newly tagged image.
docker push username/repository:tag          ###Upload your tagged image to the DockerHub repository
e.g; docker push dhruv395/get-started:version0.0.1

#Pull and run the image from the remote repository.If the image isn’t available locally on the machine, Docker pulls it from the repository
docker run -d -p 4000:80 dhruv395/get-started:version0.0.1  


Summery:

docker build -t friendlyhello .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyhello  # Run "friendlyhello" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry



